/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package syntax.highlighting;

import java.awt.Color;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author saliya
 */
public class Synth extends javax.swing.JFrame {

    /**
     * Creates new form Synth
     */
    public Synth() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("set");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 255, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTextPane1.setDocument(doc);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Synth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Synth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Synth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Synth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Synth().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
private int findLastNonWordChar(String text, int index) {
        while (--index >= 0) {
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
        }
        return index;
    }

    private int findFirstNonWordChar(String text, int index) {
        while (index < text.length()) {
            if (String.valueOf(text.charAt(index)).matches("\\W")) {
                break;
            }
            index++;
        }
        return index;
    }

    final StyleContext cont = StyleContext.getDefaultStyleContext();
    final AttributeSet keyw1 = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(23, 161, 165));//23,161,165 || 211 84 0 || 94,109,3
    final AttributeSet keyw2 = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(211, 84, 0));
    final AttributeSet keyw3 = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(94, 109, 3));
    final AttributeSet keyw4 = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, Color.red);//new Color(0, 92, 95)
    final AttributeSet attrBlack = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, Color.BLACK);
    DefaultStyledDocument doc = new DefaultStyledDocument() {
        @Override
        public void insertString(int offset, String str, AttributeSet a) throws BadLocationException {
            super.insertString(offset, str, a);

            String text = getText(0, getLength());
            int before = findLastNonWordChar(text, offset);
            if (before < 0) {
                before = 0;
            }
            int after = findFirstNonWordChar(text, offset + str.length());
            int wordL = before;
            int wordR = before;

            while (wordR <= after) {
                if (wordR == after || String.valueOf(text.charAt(wordR)).matches("\\W")) {
                    if (text.substring(wordL, wordR).matches("(\\W)*(int|array|bool|boolean|byte|char|double|float|long|short|String|unsigned|char|unsigned| int|unsigned| long|void|INPUT|LOW|HIGH|OUTPUT|INPUT_PULLUP|LED_BUILTIN|true|false)")) {
                        setCharacterAttributes(wordL, wordR - wordL, keyw1, false);
                    } else if (text.substring(wordL, wordR).matches("(\\W)*(Serial|begin|WiFi|print|delay|println|ready|size_t)")) {
                        setCharacterAttributes(wordL, wordR - wordL, keyw2, false);
                    } else if (text.substring(wordL, wordR).matches("(\\W)*(#|define|include|setup|else|loop)")) {
                        setCharacterAttributes(wordL, wordR - wordL, keyw3, false);
                    } else if (text.substring(wordL, wordR).matches("(\\W)* (\".*\")")) {
                        setCharacterAttributes(wordL, wordR - wordL, keyw4, false);
                    } else {
                        setCharacterAttributes(wordL, wordR - wordL, attrBlack, false);
                    }
                    wordL = wordR;
                }
                wordR++;
            }
        }

        @Override
        public void remove(int offs, int len) throws BadLocationException {
            super.remove(offs, len);
            String text = getText(0, getLength());
            int before = findLastNonWordChar(text, offs);
            if (before < 0) {
                before = 0;
            }
            int after = findFirstNonWordChar(text, offs);
            try {
                if (text.substring(before, after - before).matches("(\\W)*(int|array|bool|boolean|byte|char|double|float|long|short|String|unsigned| char|unsigned| int|unsigned| long|void|INPUT|LOW|HIGH|OUTPUT|INPUT_PULLUP|LED_BUILTIN|true|false)")) {
                    setCharacterAttributes(before, after - before, keyw1, false);
                } else if (text.substring(before, after - before).matches("(\\W)*(Serial|begin|WiFi|print|delay|println|ready|size_t)")) {
                    setCharacterAttributes(before, after - before, keyw2, false);
                } else if (text.substring(before, after - before).matches("(\\W)*(#|define|include|setup|else|loop)")) {
                    setCharacterAttributes(before, after - before, keyw3, false);
                } else if (text.substring(before, after - before).matches("(\\W)* (\".*\")")) {
                    setCharacterAttributes(before, after - before, keyw4, false);
                } else {
                    setCharacterAttributes(before, after - before, attrBlack, false);
                }
            } catch (Exception e) {
            }
        }
    };
}
